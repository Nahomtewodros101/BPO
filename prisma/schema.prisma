generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  firstName String
  lastName  String
  password  String
  role      Role     @default(user)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contactMessages ContactMessage[]
  jobApplications JobApplication[]
  newsArticles    NewsArticle[]
  announcements   Announcement[]
  jobs            Job[]

  @@map("users")
}

model NewsArticle {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  excerpt     String
  content     String
  category    String
  author      String
  image       String?
  published   Boolean   @default(false)
  featured    Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  @@map("news_articles")
}

model Announcement {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  type      String   @default("info") // info, warning, success, error
  priority  String   @default("normal") // low, normal, high, urgent
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  @@map("announcements")
}

model Job {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  department     String
  location       String
  type           String   // Full-time, Part-time, Contract, Internship
  experience     String
  salary         String?
  description    String
  requirements   String[] // Array of requirements
  responsibilities String[] // Array of responsibilities
  benefits       String[] // Array of benefits
  published      Boolean  @default(false)
  featured       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  applications JobApplication[]

  @@map("jobs")
}

model ContactMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String
  subject   String?
  message   String
  status    String   @default("unread") // unread, read, replied, closed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])

  @@map("contact_messages")
}

model JobApplication {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName          String
  lastName           String
  email              String
  phone              String
  coverLetter        String?
  cvFile             String?   // File path or URL
  cvLink             String?   // External CV link
  linkedinProfile    String?
  portfolioLink      String?
  availableStartDate DateTime?
  expectedSalary     String?
  additionalInfo     String?
  status             String    @default("pending") // pending, reviewing, interviewed, hired, rejected
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  jobId  String @db.ObjectId
  job    Job    @relation(fields: [jobId], references: [id])
  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])

  @@map("job_applications")
}